<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kuang.dao.TeacherMapper">
    
<!--    <select id="getTeacher" resultType="Teacher">-->

<!--        select * from mybatis.teacher;-->
<!--    </select>-->


    <!--按结果嵌套查询-->
    <select id="getTeacher" resultMap="TeacherStudent">
        select s.id sid, s.name sname, t.name tname,t.id tid
        from mybatis.student s,mybatis.teacher t
        where s.tid = t.id and t.id = #{tid}
    </select>

    <resultMap id="TeacherStudent" type="Teacher">
        <result property="id" column="tid"/>
        <result property="name" column="tname"/>
        <!--复杂的属性，我们需要单独处理 对象： association 集合： collection
        javaType="" 指定属性的类型！
        集合中的泛型信息，我们使用ofType获取
        -->
        <collection property="students" ofType="Student">
            <result property="id" column="sid"/>
            <result property="name" column="sname"/>
            <result property="tid" column="tid"/>
        </collection>
    </resultMap>


<!---->

    <select id="getTeacher2" resultMap="TeacherStudent2">
        select * from mybatis.teacher where id = #{tid} <!--这边查出来这边的学生id是空的 我们得做结果集映射-->
    </select>

    <resultMap id="TeacherStudent2" type="Teacher"><!--这边就开始做结果集映射-->
        <!--这边主要对不一样的进行映射 因为id=id name=name 所以我们这边就找不一样的 也就是我们的student没有对应的-->
        <!--首先 类属性是student  学生需要一个java类型   对应的数据表中的列其实就是id-->
        <!--javaType是用来指定pojo中的属性类型 而oftype（泛型类型）是用来哦指定映射到list集合属性中断pojo类型-->
        <!--然后先把学生给取出来 根据老师的id把学生给取出来
        -->
        <collection property="students" javaType="ArrayList" ofType="Student" select="getStudentByTeacherId" column="id"/>
    </resultMap>

    <select id="getStudentByTeacherId" resultType="Student">
        select * from mybatis.student where tid = #{tid}
    </select>




</mapper>